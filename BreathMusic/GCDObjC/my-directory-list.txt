The file GCDGroup.h contains:
//
//  GCDGroup.h
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface GCDGroup : NSObject

/**
 *  Returns the underlying dispatch group object.
 *
 *  @return The dispatch group object.
 */
@property ( readonly, nonatomic) dispatch_group_t dispatchGroup;

/**
 *  Initializes a new group.
 *
 *  @return The initialized instance.
 *  @see dispatch_group_create()
 */
- (instancetype)init;

/**
 *  The GCDGroup designated initializer.
 *
 *  @param dispatchGroup A dispatch_group_t object.
 *  @return The initialized instance.
 */
- (instancetype)initWithDispatchGroup:(dispatch_group_t)dispatchGroup;

/**
 *  Explicitly indicates that a block has entered the group.
 *
 *  @see dispatch_group_enter()
 */
- (void)enter;

/**
 *  Explicitly indicates that a block in the group has completed.
 *
 *  @see dispatch_group_leave()
 */
- (void)leave;

/**
 *  Waits forever for the previously submitted blocks in the group to complete.
 *
 *  @see dispatch_group_wait()
 */
- (void)wait;

/**
 *  Waits for the previously submitted blocks in the group to complete.
 *
 *  @param seconds The time to wait in seconds.
 *  @return YES if all blocks completed, NO if the timeout occurred.
 *  @see dispatch_group_wait()
 */
- (BOOL)wait:(double)seconds;

@end

The file GCDGroup.m contains:
//
//  GCDGroup.m
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import "GCDGroup.h"

@interface GCDGroup ()
@property ( readwrite, nonatomic) dispatch_group_t dispatchGroup;
@end

@implementation GCDGroup

#pragma mark Lifecycle.

- (instancetype)init {
  return [self initWithDispatchGroup:dispatch_group_create()];
}

- (instancetype)initWithDispatchGroup:(dispatch_group_t)dispatchGroup {
  if ((self = [super init]) != nil) {
    self.dispatchGroup = dispatchGroup;
  }
  
  return self;
}

#pragma mark Public methods.

- (void)enter {
  dispatch_group_enter(self.dispatchGroup);
}

- (void)leave {
  dispatch_group_leave(self.dispatchGroup);
}

- (void)wait {
  dispatch_group_wait(self.dispatchGroup, DISPATCH_TIME_FOREVER);
}

- (BOOL)wait:(double)seconds {
  return dispatch_group_wait(self.dispatchGroup, dispatch_time(DISPATCH_TIME_NOW, (seconds * NSEC_PER_SEC))) == 0;
}

@end

The file GCDMacros.h contains:
//
//  GCDMacros.h
//  GCDObjC
//
//  Copyright (c) 2013 Mark Smith. All rights reserved.
//
//

/**
 *  Inserts code that executes a block only once, regardless of how many times the macro is invoked.
 *
 *  @param block The block to execute once.
 */
#ifndef GCDExecOnce
#define GCDExecOnce(block) \
{ \
  static dispatch_once_t predicate = 0; \
  dispatch_once(&predicate, block); \
}
#endif

/**
 *  Inserts code that declares, creates, and returns a single instance, regardless of how many times the macro is invoked.
 *
 *  @param block A block that creates and returns the instance value.
 */
#ifndef GCDSharedInstance
#define GCDSharedInstance(block) \
{ \
  static dispatch_once_t predicate = 0; \
  static id sharedInstance = nil; \
  dispatch_once(&predicate, ^{ sharedInstance = block(); }); \
  return sharedInstance; \
}
#endif

The file GCDObjC.h contains:
//
//  GCDObjC.h
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import "GCDMacros.h"

#import "GCDGroup.h"
#import "GCDQueue.h"
#import "GCDSemaphore.h"

The file GCDQueue.h contains:
//
//  GCDQueue.h
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import <Foundation/Foundation.h>

@class GCDGroup;

@interface GCDQueue : NSObject

/**
 *  Returns the underlying dispatch queue object.
 *
 *  @return The dispatch queue object.
 */
@property (readonly, nonatomic) dispatch_queue_t dispatchQueue;

/**
 *  Returns the serial dispatch queue associated with the applicationâ€™s main thread.
 *
 *  @return The main queue. This queue is created automatically on behalf of the main thread before main is called.
 *  @see dispatch_get_main_queue()
 */
+ (GCDQueue *)mainQueue;

/**
 *  Returns the default priority global concurrent queue.
 *
 *  @return The queue.
 *  @see dispatch_get_global_queue()
 */
+ (GCDQueue *)globalQueue;

/**
 *  Returns the high priority global concurrent queue.
 *
 *  @return The queue.
 *  @see dispatch_get_global_queue()
 */
+ (GCDQueue *)highPriorityGlobalQueue;

/**
 *  Returns the low priority global concurrent queue.
 *
 *  @return The queue.
 *  @see dispatch_get_global_queue()
 */
+ (GCDQueue *)lowPriorityGlobalQueue;

/**
 *  Returns the background priority global concurrent queue.
 *
 *  @return The queue.
 *  @see dispatch_get_global_queue()
 */
+ (GCDQueue *)backgroundPriorityGlobalQueue;

/**
 *  Initializes a new serial queue.
 *
 *  @return The initialized instance.
 *  @see dispatch_queue_create()
 */
- (instancetype)init;

/**
 *  Initializes a new serial queue.
 *
 *  @return The initialized instance.
 *  @see dispatch_queue_create()
 */
- (instancetype)initSerial;

/**
 *  Initializes a new concurrent queue.
 *
 *  @return The initialized instance.
 *  @see dispatch_queue_create()
 */
- (instancetype)initConcurrent;

/**
 *  The GCDQueue designated initializer.
 *
 *  @param dispatchQueue A dispatch_queue_t object.
 *  @return The initialized instance.
 */
- (instancetype)initWithDispatchQueue:(dispatch_queue_t)dispatchQueue;

/**
 *  Submits a block for asynchronous execution on the queue.
 *
 *  @param block The block to submit.
 *  @see dispatch_async()
 */
- (void)queueBlock:(dispatch_block_t)block;

/**
 *  Submits a block for asynchronous execution on the queue after a delay.
 *
 *  @param block The block to submit.
 *  @param afterDelay The delay in seconds.
 *  @see dispatch_after()
 */
- (void)queueBlock:(dispatch_block_t)block afterDelay:(double)seconds;

/**
 *  Submits a block for execution on the queue and waits until it completes.
 *
 *  @param block The block to submit.
 *  @see dispatch_sync()
 */
- (void)queueAndAwaitBlock:(dispatch_block_t)block;

/**
 *  Submits a block for execution on the queue multiple times and waits until all executions complete.
 *
 *  @param block The block to submit.
 *  @param iterationCount The number of times to execute the block.
 *  @see dispatch_apply()
 */
- (void)queueAndAwaitBlock:(void (^)(size_t))block iterationCount:(size_t)count;

/**
 *  Submits a block for asynchronous execution on the queue and associates it with the group.
 *
 *  @param block The block to submit.
 *  @param inGroup The group to associate the block with.
 *  @see dispatch_group_async()
 */
- (void)queueBlock:(dispatch_block_t)block inGroup:(GCDGroup *)group;

/**
 *  Schedules a block to be submitted to the queue when a group of previously submitted blocks have completed.
 *
 *  @param block The block to submit when the group completes.
 *  @param forGroup The group to observe.
 *  @see dispatch_group_notify()
 */
- (void)queueNotifyBlock:(dispatch_block_t)block inGroup:(GCDGroup *)group;

/**
 *  Submits a barrier block for asynchronous execution on the queue.
 *
 *  @param block The barrier block to submit.
 *  @see dispatch_barrier_async()
 */
- (void)queueBarrierBlock:(dispatch_block_t)block;

/**
 *  Submits a barrier block for execution on the queue and waits until it completes.
 *
 *  @param block The barrier block to submit.
 *  @see dispatch_barrier_sync()
 */
- (void)queueAndAwaitBarrierBlock:(dispatch_block_t)block;

/**
 *  Suspends execution of blocks on the queue.
 *
 *  @see dispatch_suspend()
 */
- (void)suspend;

/**
 *  Resumes execution of blocks on the queue.
 *
 *  @see dispatch_resume()
 */
- (void)resume;

@end

The file GCDQueue.m contains:
//
//  GCDQueue.m
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import "GCDGroup.h"
#import "GCDQueue.h"

static GCDQueue *mainQueue;
static GCDQueue *globalQueue;
static GCDQueue *highPriorityGlobalQueue;
static GCDQueue *lowPriorityGlobalQueue;
static GCDQueue *backgroundPriorityGlobalQueue;

@interface GCDQueue ()
@property (readwrite, nonatomic) dispatch_queue_t dispatchQueue;
@end

@implementation GCDQueue

#pragma mark Global queue accessors.

+ (GCDQueue *)mainQueue {
  return mainQueue;
}

+ (GCDQueue *)globalQueue {
  return globalQueue;
}

+ (GCDQueue *)highPriorityGlobalQueue {
  return highPriorityGlobalQueue;
}

+ (GCDQueue *)lowPriorityGlobalQueue {
  return lowPriorityGlobalQueue;
}

+ (GCDQueue *)backgroundPriorityGlobalQueue {
  return backgroundPriorityGlobalQueue;
}

#pragma mark Lifecycle.

+ (void)initialize {
  if (self == [GCDQueue class]) {
    mainQueue = [[GCDQueue alloc] initWithDispatchQueue:dispatch_get_main_queue()];
    globalQueue = [[GCDQueue alloc] initWithDispatchQueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)];
    highPriorityGlobalQueue = [[GCDQueue alloc] initWithDispatchQueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0)];
    lowPriorityGlobalQueue = [[GCDQueue alloc] initWithDispatchQueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0)];
    backgroundPriorityGlobalQueue = [[GCDQueue alloc] initWithDispatchQueue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)];
  }
}

- (instancetype)init {
  return [self initSerial];
}

- (instancetype)initSerial {
  return [self initWithDispatchQueue:dispatch_queue_create(nil, DISPATCH_QUEUE_SERIAL)];
}

- (instancetype)initConcurrent {
  return [self initWithDispatchQueue:dispatch_queue_create(nil, DISPATCH_QUEUE_CONCURRENT)];
}

- (instancetype)initWithDispatchQueue:(dispatch_queue_t)dispatchQueue {
  if ((self = [super init]) != nil) {
    self.dispatchQueue = dispatchQueue;
  }
  
  return self;
}

#pragma mark Public block methods.

- (void)queueBlock:(dispatch_block_t)block {
  dispatch_async(self.dispatchQueue, block);
}

- (void)queueBlock:(dispatch_block_t)block afterDelay:(double)seconds {
  dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (seconds * NSEC_PER_SEC)), self.dispatchQueue, block);
}

- (void)queueAndAwaitBlock:(dispatch_block_t)block {
  dispatch_sync(self.dispatchQueue, block);
}

- (void)queueAndAwaitBlock:(void (^)(size_t))block iterationCount:(size_t)count {
  dispatch_apply(count, self.dispatchQueue, block);
}

- (void)queueBlock:(dispatch_block_t)block inGroup:(GCDGroup *)group {
  dispatch_group_async(group.dispatchGroup, self.dispatchQueue, block);
}

- (void)queueNotifyBlock:(dispatch_block_t)block inGroup:(GCDGroup *)group {
  dispatch_group_notify(group.dispatchGroup, self.dispatchQueue, block);
}

- (void)queueBarrierBlock:(dispatch_block_t)block {
  dispatch_barrier_async(self.dispatchQueue, block);
}

- (void)queueAndAwaitBarrierBlock:(dispatch_block_t)block {
  dispatch_barrier_sync(self.dispatchQueue, block);
}

#pragma mark Misc public methods.

- (void)suspend {
  dispatch_suspend(self.dispatchQueue);
}

- (void)resume {
  dispatch_resume(self.dispatchQueue);
}

@end

The file GCDSemaphore.h contains:
//
//  GCDSemaphore.h
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface GCDSemaphore : NSObject

/**
 *  Returns the underlying dispatch semaphore object.
 *
 *  @return The dispatch semaphore object.
 */
@property ( readonly, nonatomic) dispatch_semaphore_t dispatchSemaphore;

/**
 *  Initializes a new semaphore with starting value 0.
 *
 *  @return The initialized instance.
 *  @see dispatch_semaphore_create()
 */
- (instancetype)init;

/**
 *  Initializes a new semaphore.
 *
 *  @param value The starting value for the semaphore.
 *  @return The initialized instance.
 *  @see dispatch_semaphore_create()
 */
- (instancetype)initWithValue:(long)value;

/**
 *  The GCDSemaphore designated initializer.
 *
 *  @param dispatchSemaphore A dispatch_semaphore_t object.
 *  @return The initialized instance.
 *  @see dispatch_semaphore_create()
 */
- (instancetype)initWithDispatchSemaphore:(dispatch_semaphore_t)dispatchSemaphore;

/**
 *  Signals (increments) the semaphore.
 *
 *  @return YES if a thread is awoken, NO otherwise.
 *  @see dispatch_semaphore_signal()
 */
- (BOOL)signal;

/**
 *  Waits forever for (decrements) the semaphore.
 *
 *  @see dispatch_semaphore_wait()
 */
- (void)wait;

/**
 *  Waits for (decrements) the semaphore.
 *
 *  @param seconds The time to wait in seconds.
 *  @return YES on success, NO if the timeout occurred.
 *  @see dispatch_semaphore_wait()
 */
- (BOOL)wait:(double)seconds;

@end
The file GCDSemaphore.m contains:
//
//  GCDSemaphore.m
//  GCDObjC
//
//  Copyright (c) 2012 Mark Smith. All rights reserved.
//

#import "GCDSemaphore.h"

@interface GCDSemaphore ()
@property ( readwrite, nonatomic) dispatch_semaphore_t dispatchSemaphore;
@end

@implementation GCDSemaphore

#pragma mark Lifecycle.

- (instancetype)init {
  return [self initWithValue:0];
}

- (instancetype)initWithValue:(long)value {
  return [self initWithDispatchSemaphore:dispatch_semaphore_create(value)];
}

- (instancetype)initWithDispatchSemaphore:(dispatch_semaphore_t)dispatchSemaphore {
  if ((self = [super init]) != nil) {
    self.dispatchSemaphore = dispatchSemaphore;
  }
  
  return self;
}

#pragma mark Public methods.

- (BOOL)signal {
  return dispatch_semaphore_signal(self.dispatchSemaphore) != 0;
}

- (void)wait {
  dispatch_semaphore_wait(self.dispatchSemaphore, DISPATCH_TIME_FOREVER);
}

- (BOOL)wait:(double)seconds {
  return dispatch_semaphore_wait(self.dispatchSemaphore, dispatch_time(DISPATCH_TIME_NOW, (seconds * NSEC_PER_SEC))) == 0;
}

@end

